import json
import datetime

# 读取JSON文件并生成C++代码
def generate_cpp_from_json(file_path):
    # 从文件读取JSON数据
    with open(file_path, 'r') as f:
        data = json.load(f)

    # C++代码模板
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cpp_code = f'''
/*-------------------------------------------
This file is generated by gen_emojiSet_to_cpp_Class.py,
do not modify it manually.
Generated on {timestamp}
-------------------------------------------*/
'''
    cpp_code += '''
#include <cstdint>
#include <array>

class emoji
{
public:
    uint16_t id;
    std::array<std::array<uint8_t, 8>, 8> content;
};

class emojiSet
{
public:
    emoji LEye[27 + 1];
    emoji REye[27 + 1];
    emoji Mouth[32 + 1];
    emoji Face[5 + 1];
    emoji NullPart;  // 空的emoji部分
    emojiSet();
};

emojiSet::emojiSet()
{
    NullPart.id = 0;
    NullPart.content = {{{0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0}}};
'''

    # 遍历JSON数据生成C++代码
    for idx, item in enumerate(data):
        id_position = str(item["id"])

        if len(id_position) == 0:  # 如果id为空或格式不正确，则跳过
            continue

        if len(id_position) > 1:  # 如果id有有效的数字
            first_digit = int(id_position[0])  # 取 id 的第一位
            id_position = int(id_position[1:])  # 取后两位作为实际 id
        else:
            continue  # 如果 id 不足两位，则跳过

        if first_digit == 1:  # LEye
            cpp_code += f'    LEye[{id_position}].id = {item["id"]};\n'
        elif first_digit == 2:  # Reye
            cpp_code += f'    REye[{id_position}].id = {item["id"]};\n'
        elif first_digit == 3:  # Mouth
            cpp_code += f'    Mouth[{id_position}].id = {item["id"]};\n'
        elif first_digit == 4:  # Face
            cpp_code += f'    Face[{id_position}].id = {item["id"]};\n'

        # 处理二维数组
        cpp_code += f'    {"LEye" if first_digit == 1 else "REye" if first_digit == 2 else "Mouth" if first_digit == 3 else "Face"}[{id_position}].content = {{{{\n'
        for i, row in enumerate(item["content"]):
            # 为避免末尾多余逗号，使用条件判断
            if i == len(item["content"]) - 1:
                cpp_code += f'        {{' + ", ".join(map(str, row)) + '}}};\n'
            else:
                cpp_code += f'        {{' + ", ".join(map(str, row)) + '},\n'

    cpp_code += '''}
'''

    # 返回生成的C++代码
    return cpp_code


# 主程序
if __name__ == "__main__":
    # JSON文件路径
    json_file_path = "FaceModuleDb.json"  # 替换为你的JSON文件路径

    # 调用函数生成C++代码
    cpp_code = generate_cpp_from_json(json_file_path)

    # 输出生成的C++代码
    with open("../include/emoji_set.hpp", "w") as cpp_file:
        cpp_file.write(cpp_code)

    print("C++代码已生成并保存到 ../include/emoji_set.hpp")

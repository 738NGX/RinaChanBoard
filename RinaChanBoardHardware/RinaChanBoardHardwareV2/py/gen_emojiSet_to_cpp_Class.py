import json
import datetime
import os
# 读取JSON文件并生成C++代码
timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def generate_hpp():
    hpp_code = f'''#pragma once
/*-------------------------------------------
This file is auto generated by gen_emojiSet_to_cpp_Class.py,
DO NOT MODIFY IT MANUALLY.
Generated on {timestamp}
-------------------------------------------*/
'''
    hpp_code += '''#include <cstdint>
#include <array>

class emoji
{
public:
    uint16_t id;
    std::array<std::array<uint8_t, 8>, 8> content;
};

class emojiSet
{
public:
    static const uint8_t MAX_LEYE_COUNT  = 27;
    static const uint8_t MAX_REYE_COUNT  = 27;
    static const uint8_t MAX_MOUTH_COUNT = 32;
    static const uint8_t MAX_CHEEK_COUNT  = 5;

    emoji LEye[MAX_LEYE_COUNT + 1];
    emoji REye[MAX_REYE_COUNT + 1];
    emoji Mouth[MAX_MOUTH_COUNT + 1];
    emoji Cheek[MAX_CHEEK_COUNT + 1];
    emoji EmptyPart;
    emojiSet();
};
'''

    return hpp_code
def generate_cpp_from_json(file_path):
    # 从文件读取JSON数据
    with open(file_path, 'r') as f:
        data = json.load(f)

    # C++代码模板

    cpp_code = f'''
/*-------------------------------------------
This file is auto generated by gen_emojiSet_to_cpp_Class.py,
DO NOT MODIFY IT MANUALLY.
Generated on {timestamp}
-------------------------------------------*/
#include "emoji_set.hpp"
'''
    cpp_code += '''
emojiSet::emojiSet()
{
    EmptyPart.id = 0;
    EmptyPart.content = {{
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0}}};
'''

    # 遍历JSON数据生成C++代码
    for idx, item in enumerate(data):
        id_position = str(item["id"])

        if len(id_position) == 0:  # 如果id为空或格式不正确，则跳过
            continue

        if len(id_position) > 1:  # 如果id有有效的数字
            first_digit = int(id_position[0])  # 取 id 的第一位
            id_position = int(id_position[1:])  # 取后两位作为实际 id
        else:
            continue  # 如果 id 不足两位，则跳过

        if first_digit == 1:  # LEye
            cpp_code += f'    LEye[{id_position}].id = {item["id"]};\n'
        elif first_digit == 2:  # Reye
            cpp_code += f'    REye[{id_position}].id = {item["id"]};\n'
        elif first_digit == 3:  # Mouth
            cpp_code += f'    Mouth[{id_position}].id = {item["id"]};\n'
        elif first_digit == 4:  # Cheek
            cpp_code += f'    Cheek[{id_position}].id = {item["id"]};\n'

        # 处理二维数组
        cpp_code += f'    {"LEye" if first_digit == 1 else "REye" if first_digit == 2 else "Mouth" if first_digit == 3 else "Cheek"}[{id_position}].content = {{{{\n'
        for i, row in enumerate(item["content"]):
            # 为避免末尾多余逗号，使用条件判断
            if i == len(item["content"]) - 1:
                cpp_code += f'        {{' + ", ".join(map(str, row)) + '}}};\n'
            else:
                cpp_code += f'        {{' + ", ".join(map(str, row)) + '},\n'

    cpp_code += '''}
'''

    # 返回生成的C++代码
    return cpp_code


# 主程序
if __name__ == "__main__":
    # JSON文件路径
    # 获取当前脚本的目录
    current_dir = os.path.dirname(os.path.realpath(__file__))

    # 构造相对路径
    json_file_path = os.path.join(current_dir, "FaceModuleDb.json")
    hpp_save_file_path = os.path.join(current_dir, "../include/emoji_set.hpp") 
    cpp_save_file_path = os.path.join(current_dir, "../src/emoji_set.cpp")  
    # 调用函数生成C++代码
    cpp_code = generate_cpp_from_json(json_file_path)
    hpp_code = generate_hpp()
    # 输出生成的C++代码
    with open(cpp_save_file_path, "w") as cpp_file:
        cpp_file.write(cpp_code)
    with open(hpp_save_file_path, "w") as cpp_file:
        cpp_file.write(hpp_code)
    print(f"cpp代码已生成并保存到 {cpp_save_file_path}\nhpp保存到{hpp_save_file_path}")
